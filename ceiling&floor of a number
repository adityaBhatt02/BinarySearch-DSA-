import java.util.Scanner;

public class Test {
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);

        System.out.print("Enter the size of the array : ");
        int n = scn.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = scn.nextInt();
        }

        System.out.print("Enter the target element : ");
        int target = scn.nextInt();

        int ans = ceiling(arr , target);
        int ans1 = floor(arr , target);
        System.out.print(ans);
        System.out.print(ans1);
    }

   /*  ceiling of a number means , if the target element is in the array the ceiling = target , but if the target element is not present in the array
       then ceiling will be that element which is just greater than the target.
     */
    static int ceiling(int[] arr , int target) {
        int start = 0;
        int end = arr.length - 1;
        boolean isAsc = arr[ start ] < arr[ end ];

        if(target > arr[arr.length - 1]) {
            return -1;
        }

         while (start <= end) {
             int mid = start + (end - start)/2;

             if(isAsc) {
                 if(arr[mid] > target) {
                     end = mid - 1;
                 } else if (arr[mid] < target) {
                     start = mid + 1;
                 } else {
                     return target;
                 }
             } else {
                 if(arr[mid] > target) {
                     start = mid + 1;
                 } else if (arr[mid] < target) {
                     end = mid - 1;
                 } else {
                     return target;
                 }
             }
         }
         return arr[start];
    }

/*  floor of a number means , if the target element is in the array the floor = target , but if the target element is not present in the array
     then floor will be that element which is just smaller than the target.
   */
    static int floor(int[] arr , int target) {
        int start = 0;
        int end = arr.length - 1;
        boolean isAsc = arr[ start ] < arr[ end ];

        while (start <= end) {
            int mid = start + (end - start)/2;
            if(arr[mid] == target) {
                return target;
            }
            if(isAsc) {
                if(arr[mid] > target) {
                    end = mid - 1;
                } else if (arr[mid] < target) {
                    start = mid + 1;
                }
            } else {
                if(arr[mid] > target) {
                    start = mid + 1;
                } else if (arr[mid] < target) {
                    end = mid - 1;
                }
            }
        }
        return arr[end];
    }
}
}
